import * as React from "react";

import Box from "@mui/material/Box";
import Container from "@mui/material/Container";
import Skeleton from "@mui/material/Skeleton";
import Stack from "@mui/material/Stack";
import ToggleButton from "@mui/material/ToggleButton";
import IconButton from "@mui/material/IconButton";
import Button from "@mui/material/Button";
import EditIcon from "@mui/icons-material/Edit";
import Popper from "@mui/material/Popper";

import dynamic from "next/dynamic";

import "react-quill/dist/quill.snow.css";

import "react-quill/dist/quill.bubble.css";

const QuillNoSSRWrapper = dynamic(import("react-quill"), {
  ssr: false,
  loading: () => (
    <Stack gap={1}>
      <Skeleton variant="rounded" height={18 + 12 * 2} />
      <Skeleton variant="rounded" height={100} />
    </Stack>
  ),
});

import { styled } from "@mui/material/styles";
import FormatAlignLeftIcon from "@mui/icons-material/FormatAlignLeft";
import FormatAlignCenterIcon from "@mui/icons-material/FormatAlignCenter";
import FormatAlignRightIcon from "@mui/icons-material/FormatAlignRight";
import FormatAlignJustifyIcon from "@mui/icons-material/FormatAlignJustify";
import FormatBoldIcon from "@mui/icons-material/FormatBold";
import FormatItalicIcon from "@mui/icons-material/FormatItalic";
import FormatUnderlinedIcon from "@mui/icons-material/FormatUnderlined";
import FormatColorFillIcon from "@mui/icons-material/FormatColorFill";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import Divider from "@mui/material/Divider";
import Paper from "@mui/material/Paper";
import ToggleButtonGroup from "@mui/material/ToggleButtonGroup";
import StrikethroughSIcon from "@mui/icons-material/StrikethroughS";
import SuperscriptIcon from "@mui/icons-material/Superscript";
import SubscriptIcon from "@mui/icons-material/Subscript";
import TextIncreaseIcon from "@mui/icons-material/TextIncrease";
import FormatListNumberedIcon from "@mui/icons-material/FormatListNumbered";
import FormatListBulletedIcon from "@mui/icons-material/FormatListBulleted";

const StyledToggleButtonGroup = styled(ToggleButtonGroup)(({ theme }) => ({
  "& .MuiToggleButtonGroup-grouped": {
    margin: theme.spacing(0.5),
    border: 0,
    "&.Mui-disabled": {
      border: 0,
    },
    "&:not(:first-of-type)": {
      borderRadius: theme.shape.borderRadius,
    },
    "&:first-of-type": {
      borderRadius: theme.shape.borderRadius,
    },
  },
}));

function CustomizedDividers() {
  const [tools, setTools] = React.useState({
    bold: false,
    italic: false,
    underline: false,
    strike: false,
    header: false,
    list: {
      number: false,
      bullet: false,
    },
    script: {
      sub: false,
      sup: false,
    },
    align: "left",
  });
  const [alignment, setAlignment] = React.useState("left");
  const [script, setScript] = React.useState("");
  const [list, setList] = React.useState("");
  const [format, setFormat] = React.useState(() => []);
  const [color, setColor] = React.useState(() => []);

  console.log(format);
  console.log(script);
  console.log(alignment);
  console.log(list);
  console.log(color);

  const handleFormat = (event, newFormats) => {
    setFormat(newFormats);
  };
  const handleColor = (event, newFormats) => {
    setColor(newFormats);
  };

  const handleScript = (event, newFormats) => {
    setScript(newFormats);
  };

  const handleAlignment = (event, newAlignment) => {
    setAlignment(newAlignment);
  };

  const bold = document
    .getElementsByClassName("ql-bold")[0]
    .classList.contains("ql-active");

  const italic = document
    .getElementsByClassName("ql-italic")[0]
    .classList.contains("ql-active");

  const underline = document
    .getElementsByClassName("ql-underline")[0]
    .classList.contains("ql-active");

  const strike = document
    .getElementsByClassName("ql-strike")[0]
    .classList.contains("ql-active");

  const header = document
    .querySelector('.ql-header[value="1"]')
    .classList.contains("ql-active");

  const ordered = document
    .querySelector('.ql-list[value="ordered"]')
    .classList.contains("ql-active");

  const bullet = document
    .querySelector('.ql-list[value="bullet"]')
    .classList.contains("ql-active");

  const subscript = document
    .querySelector('.ql-script[value="sub"]')
    .classList.contains("ql-active");

  const superscript = document
    .querySelector('.ql-script[value="super"]')
    .classList.contains("ql-active");

  const align = document
    .querySelector(".ql-align > .ql-picker-label")
    .getAttribute("data-value");

  const clean = document
    .getElementsByClassName("ql-clean")[0]
    .classList.contains("ql-active");

  const handleList = (event, newAlignment) => {
    setList(newAlignment);
  };

  const updateFormats = () => {
    setTools({
      ...format,
      bold,
      italic,
      underline,
      strike,
      header,
      list: {
        ordered,
        bullet,
      },
      script: {
        sub: subscript,
        super: superscript,
      },
      align,
      clean,
    });
  };

  console.log(tools);

  return (
    <div>
      <Paper
        elevation={0}
        sx={{
          display: "flex",
          border: (theme) => `1px solid ${theme.palette.divider}`,
          flexWrap: "wrap",
        }}
      >
        <StyledToggleButtonGroup
          size="small"
          value={format}
          onChange={handleFormat}
          aria-label="text formatting"
        >
          <ToggleButton value="bold" aria-label="bold">
            <FormatBoldIcon />
          </ToggleButton>
          <ToggleButton value="italic" aria-label="italic">
            <FormatItalicIcon />
          </ToggleButton>
          <ToggleButton value="underlined" aria-label="underlined">
            <FormatUnderlinedIcon />
          </ToggleButton>
          <ToggleButton value="strike" aria-label="underlined">
            <StrikethroughSIcon />
          </ToggleButton>
          <ToggleButton value="header" aria-label="underlined">
            <TextIncreaseIcon />
          </ToggleButton>
        </StyledToggleButtonGroup>
        <Divider flexItem orientation="vertical" sx={{ mx: 0.5, my: 1 }} />
        <StyledToggleButtonGroup
          size="small"
          value={script}
          exclusive
          onChange={handleScript}
          aria-label="text alignment"
        >
          <ToggleButton value="sub" aria-label="right aligned">
            <SubscriptIcon />
          </ToggleButton>
          <ToggleButton value="super" aria-label="justified">
            <SuperscriptIcon />
          </ToggleButton>
        </StyledToggleButtonGroup>
        <Divider flexItem orientation="vertical" sx={{ mx: 0.5, my: 1 }} />
        <StyledToggleButtonGroup
          size="small"
          value={alignment}
          exclusive
          onChange={handleAlignment}
          aria-label="text alignment"
        >
          <ToggleButton value="left" aria-label="left aligned">
            <FormatAlignLeftIcon />
          </ToggleButton>
          <ToggleButton value="center" aria-label="centered">
            <FormatAlignCenterIcon />
          </ToggleButton>
          <ToggleButton value="right" aria-label="right aligned">
            <FormatAlignRightIcon />
          </ToggleButton>
          <ToggleButton value="justify" aria-label="justified">
            <FormatAlignJustifyIcon />
          </ToggleButton>
        </StyledToggleButtonGroup>
        <Divider flexItem orientation="vertical" sx={{ mx: 0.5, my: 1 }} />
        <StyledToggleButtonGroup
          size="small"
          value={list}
          exclusive
          onChange={handleList}
          aria-label="text alignment"
        >
          <ToggleButton value="bullet" aria-label="right aligned">
            <FormatListBulletedIcon />
          </ToggleButton>
          <ToggleButton value="numbered" aria-label="justified">
            <FormatListNumberedIcon />
          </ToggleButton>
        </StyledToggleButtonGroup>
      </Paper>
    </div>
  );
}

const TextEditor = ({ onChange, style, placeholder, theme }) => {
  const [format, setFormat] = React.useState({
    bold: false,
    italic: false,
    underline: false,
    strike: false,
    header: {
      1: false,
      2: false,
    },
    list: {
      number: false,
      bullet: false,
    },
    script: {
      sub: false,
      sup: false,
    },
    align: {
      center: false,
      right: false,
      left: false,
      justify: false,
    },
  });

  const modules = {
    toolbar: [
      // [{ font: [] }],
      // [{ header: [1, 2, 3, 4, 5, 6, false] }],
      ["bold", "italic", "underline", "strike"], // toggled buttons

      [{ header: 1 }, { header: 2 }], // custom button values
      [{ list: "ordered" }, { list: "bullet" }],
      [{ script: "sub" }, { script: "super" }], // superscript/subscript
      [{ align: [] }],
      // [{ color: [] }, { background: [] }],

      ["clean"], // remove formatting button
    ],
  };
  const formats = [
    "header",
    "bold",
    "italic",
    "underline",
    "strike",
    "blockquote",
    "list",
    "bullet",
    "indent",
    "link",
    "formula",
    "align",
    "header",
    "script",
    "color",
    "background",
  ];

  const [anchorEl, setAnchorEl] = React.useState(null);

  const handleClick = (event) => {
    setAnchorEl(anchorEl ? null : event.currentTarget);
    updateFormats();
  };

  const showFormat = Boolean(anchorEl);
  const id = showFormat ? "simple-popper" : undefined;

  return (
    <Box>
      {/* <QuillNoSSRWrapper
        theme="snow"
        onChange={onChange}
        modules={modules}
        formats={formats}
        placeholder={placeholder}
      /> */}
      <QuillNoSSRWrapper
        theme="snow"
        onChange={onChange}
        modules={modules}
        formats={formats}
        placeholder="Compose a comment..."
      />
      <ToggleButton onClick={handleClick} selected={showFormat}>
        <EditIcon />
      </ToggleButton>
      <Popper id={id} open={showFormat} anchorEl={anchorEl}>
        <CustomizedDividers />
      </Popper>
    </Box>
  );
};

export default TextEditor;
